<html xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"> 
<head>
<title>Custom Refinement</title>

<!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:CompatibleManagedProperties msdt:dt="string"></mso:CompatibleManagedProperties>
<mso:TemplateHidden msdt:dt="string">0</mso:TemplateHidden>
<mso:CompatibleSearchDataTypes msdt:dt="string"></mso:CompatibleSearchDataTypes>
<mso:MasterPageDescription msdt:dt="string"></mso:MasterPageDescription>
<mso:ContentTypeId msdt:dt="string">0x0101002039C03B61C64EC4A04F5361F385106604</mso:ContentTypeId>
<mso:TargetControlType msdt:dt="string">;#Refinement;#</mso:TargetControlType>
<mso:HtmlDesignAssociated msdt:dt="string">1</mso:HtmlDesignAssociated>
<mso:HtmlDesignStatusAndPreview msdt:dt="string">http://sp2013app:2013/_catalogs/masterpage/EStruyf/Filter_Custom.html, Conversion successful.</mso:HtmlDesignStatusAndPreview>
<mso:HtmlDesignConversionSucceeded msdt:dt="string">True</mso:HtmlDesignConversionSucceeded>
</mso:CustomDocumentProperties></xml><![endif]-->
</head>
<body>
    <div id="CustomRefinement">
<!--#_
  // Needed objects
  var listData = ctx.ListData;
  var hasControl = true;

  // Create a new hidden block outside the current refinement control
  var refElm = document.getElementById('Refinement');
  var hiddenBlockID = ctx.RefinementControl.containerId + "_" + ctx.RefinementControl.propertyName;
  var hiddenBlock = document.getElementById(hiddenBlockID);
  // Check if the hidden block exists, otherwise we create one
  if (hiddenBlock === null || hiddenBlock.lenght <= 0) {
    hiddenBlock = document.createElement('div');
    refElm.appendChild(hiddenBlock);
    hiddenBlock.setAttribute('id', hiddenBlockID);
    hiddenBlock.setAttribute('style', 'display:none;');
  }

  var currentRefinementCategory = ctx.ClientControl.getCurrentRefinementCategory(ctx.RefinementControl.propertyName);
  // Check if the object is null or undefined && Count the tokens currently in place
  var hasAnyFiltertokens = (!Srch.U.n(currentRefinementCategory) && currentRefinementCategory.get_tokenCount() > 0);
  
  // Check if the current Refinement Control can be exists
  if ($isNull(ctx.RefinementControl) || $isNull(ctx.ClientControl)) hasControl = false;

  if (hasControl) {
    if(!$isNull(listData) && !$isEmptyArray(listData)) {
        // Show the refinement title
        var isExpanded = Srch.Refinement.getExpanded(ctx.RefinementControl.propertyName);
        var iconClass = (isExpanded == "true"? "ms-ref-uparrow" : "ms-ref-downarrow");
        var refinerCatTitle = Srch.Refinement.getRefinementTitle(ctx.RefinementControl);
        // Display style > needed to hide the refinement list when collapsed
        var displayStyle = (isExpanded == "true"? "" : "none");
_#-->
        <div id='Container'>
            _#= Srch.U.collapsibleRefinerTitle(ctx.RefinementControl.propertyName, ctx.ClientControl.get_id(), refinerCatTitle, iconClass) =#_

<!--#_
        // (un)selected filter arrays
        var unselectedFilters = new Array();
        var selectedFilters = new Array();

        // Fill the arrays with refinement values
        for (var i = 0; i < listData.length; i++){
            var filter = listData[i];
            if(!$isNull(filter)) {
                filter.RefinementTokens = [listData[i].RefinementToken];
                filter.RefinementTokenWrappedValues = [Srch.RefinementUtil.stringValueToEqualsToken(listData[i].RefinementValue)];

                if (ctx.ClientControl.hasAllRefinementFilters(filter.RefinerName, filter.RefinementTokens) ||
                    ctx.ClientControl.hasAllRefinementFilters(filter.RefinerName, filter.RefinementTokenWrappedValues)) {
                    selectedFilters.push(filter);
                } else {
                    unselectedFilters.push(filter);
                }
            }
        }
_#-->
        <select class='ms-ref-unselSec' style='display:_#= $htmlEncode(displayStyle) =#_'>
<!--#_
        if (selectedFilters.length > 0 || hasAnyFiltertokens) {
            for (var i = 0; i < selectedFilters.length; i++) {
                var filter = selectedFilters[i];
                if(!$isNull(filter)) {
                    var refiners = new Object();
                    refiners[filter.RefinerName] = filter.RefinementTokens;
                    ShowRefiner(filter.RefinementName, filter.RefinementCount, refiners, 'removeRefinementFiltersJSON', true);
                }
            }
        }

        if (unselectedFilters.length > 0) {
            for (var i = 0; i < unselectedFilters.length; i++) {
                var filter = unselectedFilters[i];
                if(!$isNull(filter)) {
                    var refiners = new Object();
                    refiners[filter.RefinerName] = filter.RefinementTokens;
                    ShowRefiner(filter.RefinementName, filter.RefinementCount, refiners, 'updateRefinersJSON', false);
                }
            }
        }
_#--> 
        </select>
        <div id="RemoveRefinement">
<!--#_
        if (selectedFilters.length > 0 || hasAnyFiltertokens) {
            var refinerRemoval = new Object();
            refinerRemoval[ctx.RefinementControl.propertyName] = null;
            ShowRefiner('Remove refinement', null, refinerRemoval, 'updateRefinersJSON', false);
        }
_#-->
        </div>
      </div>
<!--#_
    }
  }
  
    function ShowRefiner(refinementName, refinementCount, refiners, method, selected) {
        // Create the onClick event
        var onClickEvent = "$getClientControl(document.getElementById('"+ctx.RefinementControl.containerId+"'))." + method + "('" + $scriptEncode(Sys.Serialization.JavaScriptSerializer.serialize(refiners)) + "');";

        // Check if the refinement contains results && if the current item is selected
        if (refinementCount != null && selected !== true) {
_#-->
           <option onclick='_#= onClickEvent =#_'>_#= $htmlEncode(refinementName) =#_</option>
<!--#_
        } else if (refinementCount != null && selected === true) {
_#-->
           <option onclick='_#= onClickEvent =#_' selected='selected'>_#= $htmlEncode(refinementName) =#_</option>
<!--#_
        } else {
_#-->
            <div><a href='javascript:{}' onclick='_#= onClickEvent =#_'>_#= $htmlEncode(refinementName) =#_</a></div>
<!--#_
        }
    }
_#-->
    </div>
</body>
</html>